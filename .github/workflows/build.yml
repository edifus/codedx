---
name: Build CodeDX
on:
  merge_group:
  pull_request:
    branches:
      - main
  push:
    branches:
      - develop
      - testing
    paths-ignore:
      - "**/build_iso.yml"
      - "**/build.yml"
      - "**/flatpaks"
      - "**/homebrews"
      - "**/README.md"
  schedule:
    - cron: "09 08 * * *" # 08:09am UTC daily
  workflow_dispatch:
    inputs:
      # Run with this periodically to analyze the image again
      # As package drift will make the plan eventually non-ideal
      # (existing users will have to redownload most of the image)
      fresh-rechunk:
        description: 'Clear rechunk history'
        type: boolean
        default: false

env:
  ARTIFACTHUB_LOGO_URL: https://avatars.githubusercontent.com/u/7434422?s=200&v=4
  CONTAINER_TARGET: codedx
  IMAGE_DESC: ${{ github.event.repository.description }}
  IMAGE_NAME: ${{ github.event.repository.name }}
  PULL_IMAGE_REGISTRY: ghcr.io/ublue-os
  PUSH_IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}

  # The tag used in the image from which we base of.
  # ex.: ghcr.io/org/image:IMAGE_SOURCE_TAG
  IMAGE_SOURCE_TAG: "stable"
  SOURCE_ORG: "ublue-os"
  SOURCE_REPO: "bazzite"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}-${{ inputs.brand_name}}-${{ inputs.stream_name }}
  cancel-in-progress: true

jobs:
  build_push:
    name: Build and push image
    runs-on: ubuntu-24.04
    continue-on-error: false
    permissions:
      contents: read
      packages: write
      id-token: write
    strategy:
      fail-fast: false
      matrix:
        base_name: [codedx, codedx-nvidia]
        base_image_name: [kinoite, silverblue]
        target_nvidia_flavor: [nvidia, nvidia-open]
        fedora_version: [42]
        include:
          - fedora_version: 42
            is_latest_version: true
            is_stable_version: true
            kernel_flavor: bazzite # must match a kernel_flavor from akmods repo
            kernel_version: 6.14.6-106.bazzite.fc42.x86_64 # must match a cached version of the above flavor
        exclude:
          - base_name: codedx
            target_nvidia_flavor: nvidia

    steps:
      # define environment variables
      - name: Define env.IMAGE_FLAVOR
        run: |
          if [[ "${{ matrix.base_name }}" =~ "nvidia" ]]; then
              echo "IMAGE_FLAVOR=${{ matrix.target_nvidia_flavor }}" >> $GITHUB_ENV
          else
              echo "IMAGE_FLAVOR=amd-intel" >> $GITHUB_ENV
          fi

      # define environment variables
      - name: Define env.IMAGE_NAME
        run: |
          DESKTOP=""
          if [[ "${{ matrix.base_image_name }}" == "silverblue" ]]; then
              DESKTOP="-gnome"
          fi

          if [[ "${{ env.IMAGE_FLAVOR }}" == "amd-intel" ]]; then
              echo "IMAGE_NAME=${{ format('{0}{1}', 'codedx', '${DESKTOP}') }}" >> $GITHUB_ENV
              echo "SOURCE_IMAGE=${{ format('{0}{1}', 'bazzite', '${DESKTOP}') }}" >> $GITHUB_ENV
          else
              echo "IMAGE_NAME=${{ format('{0}{1}-{2}', 'codedx', '${DESKTOP}', env.IMAGE_FLAVOR) }}" >> $GITHUB_ENV
              echo "SOURCE_IMAGE=${{ format('{0}{1}-{2}', 'bazzite', '${DESKTOP}', env.IMAGE_FLAVOR) }}" >> $GITHUB_ENV
          fi

      # define environment variables
      - name: Define env.SHA_HEAD_SHORT
        run: |
          echo "SHA_HEAD_SHORT=${GITHUB_SHA::7}" >> $GITHUB_ENV

      # Make space for build
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@54081f138730dfa15788a46383842cd2f914a1be # v1.3.1

      # Checkout push-to-registry action GitHub repository
      - name: Checkout Push to Registry action
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      # Just linting
      - name: Check just syntax
        uses: ublue-os/just-action@bda593098a84a84973b002b4377709166a68be52 # v2

      - name: Pull main and rechunk images
        uses: Wandalen/wretry.action@e68c23e6309f2871ca8ae4763e7629b9c258e1ea # v3.8.0
        with:
          attempt_limit: 3
          attempt_delay: 15000
          command: |
            # pull the base images used for FROM in Containerfile so
            # we can retry on that unfortunately common failure case
            sudo podman pull ${{ env.PULL_IMAGE_REGISTRY }}/${{ env.SOURCE_IMAGE }}:${{ matrix.fedora_version }}

            # Add rechunk as well to remove this source of failure
            sudo podman pull ghcr.io/hhd-dev/rechunk:v1.2.2

      - name: Get source versions
        id: labels
        uses: Wandalen/wretry.action@e68c23e6309f2871ca8ae4763e7629b9c258e1ea # v3.8.0
        with:
          attempt_limit: 3
          attempt_delay: 15000
          command: |
            set -eo pipefail
            skopeo inspect docker://${{ env.PULL_IMAGE_REGISTRY }}/${{ env.SOURCE_IMAGE }}:${{ matrix.fedora_version }} > source.json
            ver=$(jq -r '.Labels["org.opencontainers.image.version"]' source.json)
            if [ -z "$ver" ] || [ "null" = "$ver" ]; then
              echo "inspected image version must not be empty or null"
              exit 1
            fi
            echo "SOURCE_IMAGE_VERSION=$ver" >> $GITHUB_ENV

      # Generate a primary version key that appears
      # in KDE, rpm-ostree status, and github.
      - name: Generate Version
        id: generate-version
        shell: bash
        run: |
          # Generate the primary version key that will be stored on os-release,
          # shown on the bootloader, and used for the image tag.
          UPSTREAM_TAG="${{ env.SOURCE_IMAGE_VERSION }}"
          # Remove .0 suffix from upstream tag so we can add our own and
          # the wrong one does not end up in the image.
          UPSTREAM_TAG="${UPSTREAM_TAG%\.[0-9]}"
          FEDORA_VERSION="${{ matrix.fedora_version }}"
          SHA_SHORT="${GITHUB_SHA::7}"

          if [ -n "${{ github.event.pull_request.number }}" ]; then
            VERSION="pr-${FEDORA_VERSION}-${{ github.event.pull_request.number }}"
            PRETTY_VERSION="PR (${{ github.event.pull_request.number }}, ${UPSTREAM_TAG})"
          elif [[ ${{ github.ref_name }} == "unstable" ]]; then
            VERSION="unstable-${UPSTREAM_TAG}"
            PRETTY_VERSION="Unstable (F${UPSTREAM_TAG}, #${SHA_SHORT})"
          elif [[ ${{ github.ref_name }} == "testing" ]]; then
            VERSION="testing-${UPSTREAM_TAG}"
            PRETTY_VERSION="Testing (F${UPSTREAM_TAG}, #${SHA_SHORT})"
          elif [[ ${{ github.ref_name }} == "develop" ]]; then
            VERSION="develop-${UPSTREAM_TAG}"
            PRETTY_VERSION="Develop (F${UPSTREAM_TAG}, #${SHA_SHORT})"
          else
            VERSION="${UPSTREAM_TAG}"
            PRETTY_VERSION="Stable (F${UPSTREAM_TAG})"
          fi
          echo "tag=${VERSION}" >> $GITHUB_OUTPUT
          echo "pretty=${PRETTY_VERSION}" >> $GITHUB_OUTPUT

          echo "Generated the following:"
          cat $GITHUB_OUTPUT

      # Generate a file with all the build-args passed to buildah
      - name: Prepare build args file
        run: |
          cat <<'EOF' >>build_args.txt
          BASE_IMAGE_NAME=${{ matrix.base_image_name }}
          FEDORA_VERSION=${{ matrix.fedora_version }}
          IMAGE_BRANCH=${{ github.ref_name }}
          IMAGE_FLAVOR=${{ env.IMAGE_FLAVOR }}
          IMAGE_NAME=${{ env.IMAGE_NAME }}
          IMAGE_VENDOR=${{ github.repository_owner }}
          KERNEL_FLAVOR=${{ matrix.kernel_flavor }}
          KERNEL_VERSION=${{ matrix.kernel_version }}
          NVIDIA_FLAVOR=${{ matrix.target_nvidia_flavor }}
          SHA_HEAD_SHORT=${{ env.SHA_HEAD_SHORT }}
          SOURCE_IMAGE=${{ env.SOURCE_IMAGE }}
          VERSION_PRETTY=${{ steps.generate-version.outputs.pretty }}
          VERSION_TAG=${{ steps.generate-version.outputs.tag }}
          EOF

      # Build image using buildah and save it to raw-img
      - name: Build Image
        id: build_image
        run: |
          sudo buildah build \
            --target ${{ env.CONTAINER_TARGET }} \
            --build-arg-file build_args.txt \
            --tag raw-img .

      - name: Remove auxiliary images
        # We are tight on space, need at least 2x for OSTree
        run: |
          sudo podman image rm ${{ env.PULL_IMAGE_REGISTRY }}/${{ env.SOURCE_IMAGE }}:${{ matrix.fedora_version }}

      # Generate the previous image reference used by the Rechunker
      - name: Generate previous reference
        id: generate-prev-ref
        shell: bash
        run: |
          if [ "${{ github.event.inputs.fresh-rechunk }}" == "true" ]; then
            IMAGEREF=""
          else
            IMAGEREF="${{ env.PUSH_IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}:stable"
          fi

          echo "ref=${IMAGEREF}" >> $GITHUB_OUTPUT

          echo "Generated the following:"
          cat $GITHUB_OUTPUT

      #- name: Check Secureboot
      #  shell: bash
      #  run: |
      #    set -x
      #    if [[ ! $(command -v sbverify) || ! $(command -v curl) || ! $(command -v openssl) ]]; then
      #      sudo apt update
      #      sudo apt install sbsigntool curl openssl
      #    fi
      #    TMP=$(sudo podman create raw-img bash)
      #    sudo podman cp $TMP:/usr/lib/modules/${{ matrix.kernel_version }}/vmlinuz .
      #    sudo podman rm $TMP
      #    sudo chmod 666 vmlinuz # might not be needed
      #    sbverify --list vmlinuz
      #    curl --retry 3 -Lo kernel-sign.der https://github.com/ublue-os/kernel-cache/raw/main/certs/public_key.der
      #    curl --retry 3 -Lo akmods.der https://github.com/ublue-os/kernel-cache/raw/main/certs/public_key_2.der
      #    openssl x509 -in kernel-sign.der -out kernel-sign.crt
      #    openssl x509 -in akmods.der -out akmods.crt
      #    sbverify --cert kernel-sign.crt vmlinuz || exit 1
      #    sbverify --cert akmods.crt vmlinuz || exit 1

      # Reprocess raw-img using rechunker which will delete it
      - name: Run Rechunker
        id: rechunk
        uses: hhd-dev/rechunk@ca77507401f8700bb0b25ebecbbf980a078cd180 # v1.2.2
        with:
          rechunk: 'ghcr.io/hhd-dev/rechunk:v1.2.2'
          ref: 'raw-img'
          prev-ref: '${{ steps.generate-prev-ref.outputs.ref }}'
          version: '${{ steps.generate-version.outputs.tag }}'
          labels: |
            containers.bootc=1
            io.artifacthub.package.deprecated=false
            io.artifacthub.package.keywords=bootc,ublue,universal-blue
            io.artifacthub.package.license=Apache-2.0
            io.artifacthub.package.logo-url=${{ env.ARTIFACTHUB_LOGO_URL }}
            io.artifacthub.package.prerelease=false
            io.artifacthub.package.readme-url=https://raw.githubusercontent.com/${{ github.repository_owner }}/${{ github.event.repository.name }}/refs/heads/main/README.md
            org.opencontainers.image.created=<timestamp>
            org.opencontainers.image.description=${{ github.event.repository.description }}
            org.opencontainers.image.licenses=Apache-2.0
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.source=https://github.com/${{ github.repository_owner }}/${{ github.event.repository.name }}/blob/main/Containerfile
            org.opencontainers.image.title=${{ env.IMAGE_NAME }}
            org.opencontainers.image.url=https://github.com/${{ github.repository_owner }}/${{ github.event.repository.name }}
            org.opencontainers.image.vendor=${{ github.repository_owner }}
            org.universal-blue.pkg.gamescope=<relver:gamescope>
            org.universal-blue.pkg.kernel=<relver:kernel>

      # Generate tags after rechunker runs and checks the primary tag is not duplicated
      # If it is, rechunk will suffix it by .1, .2, etc and put it in steps.rechunk.outputs.version
      - name: Generate tags
        id: generate-tags
        shell: bash
        run: |
          # Common vars for generating tags
          VERSION_TAG="${{ steps.rechunk.outputs.version }}"
          UPSTREAM_TAG="${{ env.SOURCE_IMAGE_VERSION }}"
          FEDORA_VERSION="${{ matrix.fedora_version }}"
          SHA_SHORT="${GITHUB_SHA::7}"
          BUILD_TAGS=( "${VERSION_TAG}" )

          # Use latest var to check if we should tag as latest
          unset LATEST
          if [[ "${{ matrix.is_latest_version }}" == "true" ]] && \
              [[ "${{ matrix.is_stable_version }}" == "true" ]]; then
                LATEST="1"
          fi

          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            # Track latest ver per PR
            if [ -n "$LATEST" ]; then
                BUILD_TAGS+=("pr-${{ github.event.pull_request.number }}")
            fi
          elif [[ ${{ github.ref_name }} == "unstable" ]]; then
            # Per fedora version
            BUILD_TAGS+=("${FEDORA_VERSION}-unstable")
            BUILD_TAGS+=("unstable-${FEDORA_VERSION}") # flip ver to be last

            if [ -n "$LATEST" ]; then
                BUILD_TAGS+=("unstable")
            fi
          elif [[ ${{ github.ref_name }} == "testing" ]]; then
            # Per fedora version
            BUILD_TAGS+=("${FEDORA_VERSION}-testing")
            BUILD_TAGS+=("testing-${FEDORA_VERSION}") # flip ver to be last

            if [ -n "$LATEST" ]; then
                BUILD_TAGS+=("testing")
            fi
          elif [[ ${{ github.ref_name }} == "develop" ]]; then
            # Per fedora version
            BUILD_TAGS+=("${FEDORA_VERSION}-develop")
            BUILD_TAGS+=("develop-${FEDORA_VERSION}") # flip ver to be last

            if [ -n "$LATEST" ]; then
                BUILD_TAGS+=("develop")
            fi
          else
            BUILD_TAGS+=("${FEDORA_VERSION}")
            BUILD_TAGS+=("stable-${VERSION_TAG}")

            # Per fedora version
            BUILD_TAGS+=("${FEDORA_VERSION}-stable")
            BUILD_TAGS+=("stable-${FEDORA_VERSION}") # flip ver to be last

            if [ -n "$LATEST" ]; then
              BUILD_TAGS+=("latest" "stable")
            fi
          fi

          echo "Generated the following build tags: "
          for TAG in "${BUILD_TAGS[@]}"; do
              echo "${TAG}"
          done
          echo "alias_tags=${BUILD_TAGS[*]}" >> $GITHUB_OUTPUT

      # Workaround bug where capital letters in your GitHub username make it impossible to push to GHCR.
      # https://github.com/macbre/push-to-ghcr/issues/12
      - name: Lowercase Registry
        id: registry_case
        uses: ASzc/change-string-case-action@d0603cd0a7dd490be678164909f65c7737470a7f # v6
        with:
          string: ${{ env.PUSH_IMAGE_REGISTRY }}

      # Push the image to GHCR (Image Registry)
      - name: Push To GHCR
        uses: Wandalen/wretry.action@e68c23e6309f2871ca8ae4763e7629b9c258e1ea # v3.8.0
        id: push
        if: github.event_name != 'pull_request'
        with:
          attempt_limit: 3
          attempt_delay: 15000
          command: |
            log_sum() { echo "$1" >> $GITHUB_STEP_SUMMARY; }
            log_sum '# Push to GHCR result'
            log_sum '```'
            echo "${{ secrets.GITHUB_TOKEN }}" | sudo podman login ghcr.io -u ${{ github.actor }} --password-stdin
            for tag in ${{ steps.generate-tags.outputs.alias_tags }}; do
              dest_image="${{ steps.registry_case.outputs.lowercase }}/${{ env.IMAGE_NAME }}:$tag"
              sudo skopeo copy ${{ steps.rechunk.outputs.ref }} docker://$dest_image &&
                log_sum "$dest_image"
            done
            log_sum '```'

      # This section is optional and only needs to be enabled if you plan on distributing
      # your project for others to consume. You will need to create a public and private key
      # using Cosign and save the private key as a repository secret in Github for this workflow
      # to consume. For more details, review the image signing section of the README.
      - name: Get Image Digest
        id: digest
        run: |
          # Get digest for signing
          DIGEST=$(sudo skopeo inspect --format '{{.Digest}}' ${{ steps.rechunk.outputs.ref }})
          echo "Digest is: $DIGEST"
          echo "digest=${DIGEST}" >> $GITHUB_OUTPUT

      - name: Sign container image
        uses: EyeCantCU/cosign-action/sign@58722a084c82190b57863002d494c91eabbe9e79 # v0.3.0
        if: github.event_name != 'pull_request'
        with:
          containers: ${{ env.IMAGE_NAME }}
          registry-token: ${{ secrets.GITHUB_TOKEN }}
          signing-secret: ${{ secrets.SIGNING_SECRET }}
          tags: ${{ steps.digest.outputs.digest }}
          registry: ${{ env.PUSH_IMAGE_REGISTRY }}

  check:
    name: Check all builds successful
    if: always()
    runs-on: ubuntu-latest
    needs: [build_push]
    steps:
      - name: Check Jobs
        env:
          JOBS: ${{ toJson(needs) }}
        run: |
          echo "Job status:"
          echo $JOBS | jq -r 'to_entries[] | " - \(.key): \(.value.result)"'

          for i in $(echo $JOBS | jq -r 'to_entries[] | .value.result'); do
            if [ "$i" != "success" ] && [ "$i" != "skipped" ]; then
              echo ""
              echo "Status check not okay!"
              exit 1
            fi
          done
